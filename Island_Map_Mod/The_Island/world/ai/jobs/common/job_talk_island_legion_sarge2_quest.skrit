
Go    m_Go$;
GoMind  m_Mind$;
GoBody  m_Body$;
Job    m_Job$;
Goid  m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//  init

event OnJobInitPointers$( Job job$ )
{
  m_Job$    = job$;
  m_Go$    = job$.Go;
  m_Mind$    = job$.Go.Mind;
  m_Body$    = job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
  OnJobInitPointers$( job$ );

  m_Target$  = job$.GoalObject;

  SetState Talk$;
}


////////////////////////////////////////////////////////////////////////////////
//  face the audience
state Face$
{
  transition
  {
    -> Talk$:  OnWorldMessage( WE_MCP_FACING_LOCKEDON );
  }

  event OnEnterState$
  {
    if( !m_Go$.HasConversation )
    {
      report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
              m_Go$.GetTemplateName,
              m_Go$.Goid );
      SetState Exiting$;
    }
    MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
  }
}


////////////////////////////////////////////////////////////////////////////////
//  blab blab away... pretend you're Darlene
state Talk$
{
  transition
  {
    -> Exiting$:  OnWorldMessage( WE_REQ_TALK_END ) =
    {
      if( m_Go$.Mind.ActorAutoFidgets )
      {
        StartFidgetIfRequired$();
      }
    }
  }

  event OnEnterState$
  {
    // have they completed the quest?
    if ( Victory.IsQuestCompleted( "island_legion_recovery" , m_Target$) )
    {
        m_Go$.GetConversation.RSSelectConversation( "sarge_2_recovery_after" );
    }
    else
    {
      // they don't have the quest yet
      m_Go$.GetConversation.RSSelectConversation( "sarge_2_recovery_before" );
    }
    m_Go$.GetConversation.RSActivateDialogue();
  }
}


////////////////////////////////////////////////////////////////////////////////
//  finish blabbing
state Exiting$
{
  event OnEnterState$
  {
    m_Job$.MarkForDeletion();
  }
}