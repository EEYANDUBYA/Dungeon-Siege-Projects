/*
  ============================================================================
  ----------------------------------------------------------------------------

  File    :   job_talk_mp.skrit

  Author(s)  :   Bartosz Kijanka, Eric Tams, David Tomandl

  Purpose    :   Skrit for the NPC Guard's (and possibly other's) in the Island
                 map for telling the player what areas are too advanced.

  (C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go    m_Go$;
GoMind  m_Mind$;
GoBody  m_Body$;
Job    m_Job$;
Goid  m_Target$;

//string red_Con$;
string low_Con$;
string high_Con$;

#include "k_job_c_mcp_fidget_utils"

startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//  init
event OnJobInitPointers$( Job job$ )
{
  m_Job$    = job$;
  m_Go$    = job$.Go;
  m_Mind$    = job$.Go.Mind;
  m_Body$    = job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
  OnJobInitPointers$( job$ );

  m_Target$  = job$.GoalObject;

  SetState Talk$;

}

////////////////////////////////////////////////////////////////////////////////
//  blab blab away... pretend you're Lee
state Talk$
{
  transition
  {
    -> Exiting$:  OnWorldMessage( WE_REQ_TALK_END ) =
    {
      if( m_Go$.Mind.ActorAutoFidgets )
      {
        StartFidgetIfRequired$();
      }
    }
  }

  trigger OnWorldMessage$( WE_ANIM_DONE )
  {
    if( m_Go$.Mind.ActorAutoFidgets )
    {
      StartFidgetIfRequired$();
    }
  }

  event OnEnterState$
  {
    if( m_Go$.HasComponent( "check_level" ) )
    {
      if( m_Go$.GetComponentBool( "check_level", "check_level", false ) )
      {
        if( StringTool.IsEmpty( low_Con$ ))
        {
          StringTool.Append( low_Con$, m_Go$.GetConversation.GetSelectedConversation );
          StringTool.Append( low_Con$, "_low" );
        }
        if( StringTool.IsEmpty( high_Con$ ))
        {
          StringTool.Append( high_Con$, m_Go$.GetConversation.GetSelectedConversation );
          StringTool.Append( high_Con$, "_high" );
        }
      }
    }

    // select conversation.
    if( m_Go$.HasComponent( "check_level" ) )
    {
      if( m_Go$.GetComponentBool( "check_level", "check_level", false ) )
      {
        float level$ = m_Target$.Go.Actor.GetSkillLevel( "Uber" );

        float low$ = m_Go$.GetComponentFloat( "check_level", "low_level", 1.0 );
        float high$ = m_Go$.GetComponentFloat( "check_level", "high_level", 1.0 );

        if ( World.IsMultiPlayer() )
        {
          string world_name$ = WorldMap.GetMpWorldName();
          if ( world_name$ == "veteran" )
          {
            low$ = m_Go$.GetComponentFloat( "check_level", "low_level_2w", 1.0 );
            high$ = m_Go$.GetComponentFloat( "check_level", "high_level_2w", 1.0 );
          }
          else if ( world_name$ == "elite" )
          {
            low$ = m_Go$.GetComponentFloat( "check_level", "low_level_3w", 1.0 );
            high$ = m_Go$.GetComponentFloat( "check_level", "high_level_3w", 1.0 );
          }
        }

        report.genericf("level: %g  low: %g  high: %g\n", level$, low$, high$);

        if( level$ < low$ )
        {
          report.generic("trying low level\n");
          m_Go$.Conversation.RSSelectConversation( low_Con$ );
        }
        else if( level$ > high$ )
        {
          report.generic("trying high level\n");
          m_Go$.Conversation.RSSelectConversation( high_Con$ );
        }
      }
    }
    m_Go$.Conversation.RSActivateDialogue();
    if( m_Go$.Mind.ActorAutoFidgets )
    {
      StartFidgetIfRequired$();
    }
  }
}


////////////////////////////////////////////////////////////////////////////////
//  finish blabbing
state Exiting$
{
  event OnEnterState$
  {
    m_Job$.MarkForDeletion();
  }
}