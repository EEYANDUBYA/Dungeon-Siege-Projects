
Go    m_Go$;
GoMind  m_Mind$;
GoBody  m_Body$;
Job    m_Job$;
Goid  m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//  init

event OnJobInitPointers$( Job job$ )
{
  m_Job$    = job$;
  m_Go$    = job$.Go;
  m_Mind$    = job$.Go.Mind;
  m_Body$    = job$.Go.Body;
}


event OnJobInit$( Job job$ )
{
  OnJobInitPointers$( job$ );

  m_Target$  = job$.GoalObject;

  SetState Talk$;
}


////////////////////////////////////////////////////////////////////////////////
//  face the audience
state Face$
{
  transition
  {
    -> Talk$:  OnWorldMessage( WE_MCP_FACING_LOCKEDON );
  }

  event OnEnterState$
  {
    if( !m_Go$.HasConversation )
    {
      report.errorf( "Actor '%s', scid:0x%08x was told to run job_talk but he doesn't have a conversation component.",
              m_Go$.GetTemplateName,
              m_Go$.Goid );
      SetState Exiting$;
    }
    MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
  }
}


////////////////////////////////////////////////////////////////////////////////
//  blab blab away... pretend you're Darlene
state Talk$
{
  transition
  {
    -> Exiting$:  OnWorldMessage( WE_REQ_TALK_END ) =
    {
      if( m_Go$.Mind.ActorAutoFidgets )
      {
        StartFidgetIfRequired$();
      }
    }
  }

  //trigger OnWorldMessage$( WE_ANIM_DONE )
  //{
    //TryAnim$('talk');
  //}

  event OnEnterState$//the letter retrieval quest for the legion
  {
    // have they found and returned the letter?
    if ( Victory.IsQuestCompleted( "island_legion_recovery" , m_Target$) )
    {
      m_Go$.GetConversation.RSSelectConversation( "island_legion_captain_letter_after" );
      //TryAnim$('talk');
    }
    else if (( Victory.GetQuestOrder( "island_legion_recovery" , m_Target$ ) == 1))
    {
      //they need to find the letter
      m_Go$.GetConversation.RSSelectConversation( "island_legion_captain_letter_2" );

      //Update the quest
      //Victory.RSActivateQuest( "island_legion_recovery", 2 );

        // Take (delete) the book
        goid srecord$ = UIPartyManager.DoesActivePartyHaveTemplate( "island_book_lore_scout_report_comp", m_Target$ );
        m_Target$.Go.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, srecord$ ) );
        PostWorldMessage( WE_REQ_DELETE, srecord$, srecord$, .1 );
      //TryAnim$('talk');
        //dropping the reward(s)
      {
        SiegePos SpawnPos$;
        GoCloneReq cloneReq$ = MakeGoCloneReq( "gold" );
        SpawnPos$ = m_Target$.go.placement.position;
        cloneReq$.StartingPos  = SpawnPos$;
        if ( m_Target$.Go.Hasmind )
        {
           if (AIQuery.FindSpotRelativeToSource(m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1))
           {
              cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
           }
        }
        cloneReq$.SnapToTerrain = true;
        Goid gold$ = GoDb.SCloneGo( cloneReq$ );
        gold$.Go.Aspect.SetGoldValue(300);
      }
    }
    else if ((Goid.InValidGoid != UIPartyManager.DoesActivePartyHaveTemplate( "island_book_lore_scout_report_comp", m_Target$)))
    {
    //They have the item in their inventory, but they did not get the quest

       // Take (delete) the book
        goid srecord$ = UIPartyManager.DoesActivePartyHaveTemplate( "island_book_lore_scout_report_comp", m_Target$ );
        m_Target$.Go.Mind.SDoJob( MakeJobReq( JAT_DROP, JQ_ACTION, QP_FRONT, AO_REFLEX, srecord$ ) );
        PostWorldMessage( WE_REQ_DELETE, srecord$, srecord$, .1 );

      Victory.RSActivateQuest( "island_legion_recovery", 0 );
      Victory.RSActivateQuest( "island_legion_recovery", 1 );
      Victory.RSActivateQuest( "island_legion_recovery", 2 );//Update that shit yo

              //dropping the reward(s)
      {
        SiegePos SpawnPos$;
        GoCloneReq cloneReq$ = MakeGoCloneReq( "gold" );
        SpawnPos$ = m_Target$.go.placement.position;
        cloneReq$.StartingPos  = SpawnPos$;
        if ( m_Target$.Go.Hasmind )
        {
           if (AIQuery.FindSpotRelativeToSource(m_Target$.Go, 1, 1.5, 2.0, m_Target$.Go.Mind.TempPos1))
           {
              cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
           }
        }
        cloneReq$.SnapToTerrain = true;
        Goid gold$ = GoDb.SCloneGo( cloneReq$ );
        gold$.Go.Aspect.SetGoldValue(300);
      }
      //select the right convo
      m_Go$.GetConversation.RSSelectConversation( "island_legion_captain_letter_2" );
    }
    else
    {
      //They don't have the quest yet, so they need it assigned to them
      m_Go$.GetConversation.RSSelectConversation( "a_island_legion_captain_letter_before" );
      //TryAnim$('talk');
    }
    m_Go$.GetConversation.RSActivateDialogue();
  }
}


////////////////////////////////////////////////////////////////////////////////
//  finish blabbing
state Exiting$
{
  event OnEnterState$
  {
    m_Job$.MarkForDeletion();
  }
}