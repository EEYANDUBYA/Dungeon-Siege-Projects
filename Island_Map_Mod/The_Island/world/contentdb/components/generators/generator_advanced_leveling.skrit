//////////////////////////////////////////////////////////////////////////////
//
// File     :  generator_advanced_leveling.skrit
// Author(s):  Eric Tams, Uncle Ernsie
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//
// ScidBits Key.
// lower 16 bits, number remaining creatures to spawn
// 17th bit = modified
// 18th bit = active

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool   _server_only$        = true;
property string _doc$                = "Advanced Gen which Supports Two Anims, Accel/Decel, and External Spawnpoints";
property string _required_component$ = "placement";

//Internal Properties
//bool   accel_over$  = false;

// exported properties
//----Movement--------
property Scid     Spawnpoint$                  doc = "Scid of Spawnpoint Object if applicable";
property Scid     Initial_Command$              doc = "Scid of Command Object if applicable";

//----Check Level--------
property bool       check_level$    = true      doc = "Check the level of the Screen hero in sight range.";
property float      lowest_level$   = 1.0      doc = "if uber level is under this spawn lowest";
property float      low_level$      = 2.0      doc = "if uber level is under this spawn low";
property float      medium_level$   = 3.0      doc = "if uber level is under this spawn medium";
property float      high_level$      = 4.0      doc = "if uber level is above this spawn high";
property float      highest_level$      = 5.0      doc = "if uber level is above this spawn highest";
property float      super_level$      = 6.0      doc = "if uber level is above this spawn super";
property float      crazy_level$      = 7.0      doc = "if uber level is above this spawn crazy";

//----Generator-------
property string   child_template_name$            doc = "Template name of the final child you want to spawn.";
property string   child_template_name_lowest$            doc = "Template name of the lowest level child you want to spawn.";
property string   child_template_name_low$            doc = "Template name of the lower level child you want to spawn.";
property string   child_template_name_medium_low$            doc = "Template name of the medium low level child you want to spawn.";
property string   child_template_name_medium_high$            doc = "Template name of the medium high level child you want to spawn.";
property string   child_template_name_high$            doc = "Template name of the high level child you want to spawn.";
property string   child_template_name_highest$            doc = "Template name of the highest level child you want to spawn.";
property string   child_template_name_super$            doc = "Template name of the super level child you want to spawn.";
property string   child_template_name_crazy$            doc = "Template name of the crazy level child you want to spawn.";
property int      num_children_incubating$  = 10000        doc = "How many children total do you want to spawn?";
property float    spawn_period$              = 1      doc = "Period between spawns.  Accel/Decel effects this number.";
property int      max_alive_children$        = 1            doc = "Maximum number of children which can be alive at a time.";
property float    spawn_range$               = 0.5      doc = "A radius around the spawnpoint/or generator used for collision detection.";
property float    trigger_range$               = -1.0      doc = "When a party member is within this radius, the generator will activate.";
//----Anims-----------
//property bool    anim_one_shot$        = false      doc = "Only play the spawn animation once before we start to spawn actors.";
//property int     anim_chore_start$        = 'SPWN'    doc = "Play this anim chore before spawning the actor.";
//property int     anim_chore_end$          = 'REST'       doc = "Play this anim chore after spawning the actor.";
property bool     accelerate$              = true      doc = "Acceleration on?";
property int      accel_delay$             = 0        doc = "Number of spawn cycles before accelerating.";
property float    accel_rate$             = 300      doc = "Rate of accel/decel. (Modifies Spawn_Period).";
property int    accel_count$             = 0      doc = "Number of spawn cycles at peak accel before decel.";
property float    accel_cap$               = 1.1      doc = "When the Spawn_Period is less than this number accel stops.";
property float    decel_cap$          = 300          doc = "When the Spawn_Period is greater than this number decel stops.";
owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////
// global states

trigger OnGoPreload$
{
  if(!StringTool.IsEmpty(child_template_name$))
  {
    GoDb.PreloadCloneSource( owner.Go, child_template_name$ );
  }
}

event OnGoDrawDebugHud$
{
  World.DrawDebugSphere( owner.Go.Placement.Position,
               spawn_range$,
               MakeColor( 1.0, 0.0, 0.0 ),
               Debug.Format( "accel_delay: %d\naccel_count: %d\nincubating: %d\nspawn period: %f\nmax alive: %d\nspawn template: %s",
                     accel_delay$, accel_count$, num_children_incubating$, spawn_period$, max_alive_children$, child_template_name$  ) );


    if ( SpawnPoint$.IsValid() && SpawnPoint$.getgoid.isvalid() )
    {
    World.DrawDebugDirectedLine( owner.go.Placement.Position,
                   SpawnPoint$.go.Placement.Position,
                                     MakeColor( 1.0, 1.0, 0.0 ),
                                     "Spawnpoint" );
    }

    if ( ( Initial_Command$.IsValid() && Initial_Command$.getgoid.isvalid() ) && ( SpawnPoint$.IsValid() && SpawnPoint$.getgoid.isvalid() ) )
    {
    World.DrawDebugDirectedLine( Spawnpoint$.go.Placement.Position,
                   Initial_Command$.go.Placement.Position,
                                     MakeColor( 1.0, 1.0, 0.0 ),
                                     "Initial_Command" );
    }
}

//////////////////////////////////////////////////////////////////////////////
// functions

bool spawn_guy$
{
  accel_cap$ = Math.MaxFloat(0.2, accel_cap$);

    bool blocked$ = false;

    if ( SpawnPoint$.IsValid() && SpawnPoint$.getgoid.isvalid() && ( spawn_range$ > 0.0 ) )
    {
    if ( AiQuery.DoesSphereHaveHumanControlledOccupants (Spawnpoint$.Go.Placement.Position, spawn_range$) )
      {
      Report.ReportF("jedi","[%8.3f] Blocked = True on [Opening$] for %s, using Range:%g Scid: 0x%08x\n",WorldTime.time,owner.goid.go.templatename,spawn_range$,SpawnPoint$);
          blocked$ = true;
    }
  }
    else if ( AiQuery.DoesSphereHaveHumanControlledOccupants ( owner.go.placement.position, spawn_range$ ) )
    {
    Report.ReportF("jedi","[%8.3f] Blocked = True on [Opening$] for %s\n",WorldTime.time,owner.goid.go.templatename);
        blocked$ = true;
  }

  Report.ReportF("jedi","[%8.3f] Blocking Check for %s\n",WorldTime.time,owner.goid.go.templatename);
    //This is supposed to be a false check but is broken right now.  -J
  if ( !blocked$ )
  {
    // one less monster
    num_children_incubating$ = num_children_incubating$ - 1;

    Report.ReportF("jedi","kids left: %d\n",num_children_incubating$);

    //open the grate
       Report.ReportF("jedi","[%8.3f] Animate Open for %s\n",WorldTime.time,owner.goid.go.templatename);


    Go player$ = Server.GetScreenHero;
    if( AiQuery.GetDistance( player$.placement.position, owner.Go.placement.position ) < (trigger_range$ + 1) )
    {
      float level$ = player$.Actor.GetSkillLevel( "Uber" );

      float lowest$ = lowest_level$;
      float low$ = low_level$;
      float medium$ = medium_level$;
      float high$ = high_level$;
      float highest$ = highest_level$;
      float super$ = super_level$;
      float crazy$ = crazy_level$;

      //Low Levels
      if( level$ <= lowest$ )
      {
        child_template_name$ = child_template_name_lowest$;
      }
      else if( level$ <= low$ )
      {
        child_template_name$ = child_template_name_low$;
      }

      //Medium Levels
      else if( ( level$ > low$ ) && ( level$ <= medium$ ))
      {
        child_template_name$ = child_template_name_medium_low$;
      }
      else if( ( level$ > medium$ ) && ( level$ < high$ ))
      {
        child_template_name$ = child_template_name_medium_high$;
      }

      //High Levels
      else if( ( level$ >= high$ ) && ( level$ <= highest$ ) )
      {
        child_template_name$ = child_template_name_high$;
      }
      else if( ( level$ > highest$ ) && ( level$ < super$ ) )
      {
        child_template_name$ = child_template_name_highest$;
      }
      else if( ( level$ >= super$ ) && ( level$ < crazy$ ) )
      {
        child_template_name$ = child_template_name_super$;
      }
      else if( level$ >= crazy$ )
      {
        child_template_name$ = child_template_name_crazy$;
      }
    }



        // make a new child
    GoCloneReq cloneReq$ = MakeGoCloneReq( owner.Goid, child_template_name$ );

    if ( SpawnPoint$.IsValid() && SpawnPoint$.getgoid.isvalid() )
    {
      SiegePos SpawnPos$ = Spawnpoint$.go.placement.position;
      cloneReq$.StartingPos  = SpawnPos$;
            cloneReq$.SetStartingOrient = Spawnpoint$.Go.Placement.Orientation;
    }
    else
    {
      SiegePos SpawnPos$ = owner.go.placement.position;
      cloneReq$.StartingPos  = SpawnPos$;
            cloneReq$.SetStartingOrient = owner.Go.Placement.Orientation;
    }

      Report.ReportF("jedi","[%8.3f] Clone Monster for %s\n",WorldTime.time,owner.goid.go.templatename);
    cloneReq$.SnapToTerrain = true;
        Goid newGoid$  = GoDb.SCloneGo( cloneReq$ );

    Report.ReportF("jedi","[%8.3f] Give Monster Initial_Command$ for %s\n",WorldTime.time,owner.goid.go.templatename);
    //If valid give clone an initial command
    if ( Initial_Command$.IsValid() && Initial_Command$.getgoid.isvalid() )
        {
      newGoid$.Go.Mind.SetInitialCommand( Initial_Command$ );
        }

    if (accel_delay$ > 0)
    {
      accel_delay$ -= 1;
    }
    return true;
  }
  return false;
}

void Calc_Accel$
{
  Report.ReportF("jedi","[%8.3f] Entered Accel$ for %s\n",WorldTime.time,owner.goid.go.templatename);
    if (accel_delay$ <= 0)
    {
      if ( (accel_count$ > 0) && (spawn_period$ > accel_cap$))
      {
        spawn_period$ = Math.MaxFloat( spawn_period$ - accel_rate$, accel_cap$);
        accel_count$ -= 1;
      } else {
        accel_count$ = 0;
        spawn_period$ = Math.MinFloat( spawn_period$ + accel_rate$, decel_cap$);
      }
    }
  Report.ReportF("jedi","[%8.3f] Transition [Accel$ -> Closing$] for %s\n",WorldTime.time,owner.goid.go.templatename);
}

//////////////////////////////////////////////////////////////////////////////
// local states

Trigger OnGoHandleMessage$( WE_LEFT_WORLD )
{
  owner.Go.RemoveAllChildren;

  int bits$ = Godb.GetScidBits( owner.scid );

  bits$ &= 0xFFFF0000;

  if( ( num_children_incubating$ <= 10000 ) && ( num_children_incubating$ >= 0 ) )
  {
    bits$ += num_children_incubating$;
  }

  Godb.SetScidBits( owner.scid, bits$ );
}

startup state Startup$
{
  Trigger OnGoHandleMessage$( WE_ENTERED_WORLD )
  {
    #only( game )
    [[
    if( num_children_incubating$ > 10000 ) // sanity check
    {
      Report.ErrorF("Sanity Check.\nGenerator: 0x%08x has over 10000 incubating children!!\n",MakeInt( owner.scid ) );
      num_children_incubating$ = 10000;
    }

    int bits$ = Godb.GetScidBits( owner.scid );

//    report.genericf("In Bits: 0x%08x, %d\n", bits$, bits$);

    if( !( bits$ == 0 ) )
    {
      int num_left$ = bits$ & 0x0000FFFF;

      if( num_left$ < num_children_incubating$ )
      {
        num_children_incubating$ = num_left$;
      }
      if ( Godb.GetScidBit( owner.scid, 17 ) ) //generator is active
      {
        SetState CheckSpawn$;
        return;
      }
    }
    SetState Inactive$;
    ]]
  }
  event OnExitState$
  {
    Godb.SetScidBit( owner.scid, 16, true);
  }
}

state Inactive$
{
  transition -> CheckSpawn$: OnGoHandleMessage( WE_REQ_ACTIVATE );
  transition -> CheckSpawn$: OnTimer( 1 );
  transition -> Inactive$: OnTimer( 2 );

  event OnEnterState$
  {
    Godb.SetScidBit( owner.scid, 17, false );

    if( Trigger_Range$ > 0.0 )
    {
      if ( AiQuery.DoesSphereHaveHumanControlledOccupants( owner.Go.Placement.Position, Trigger_Range$))
          {
            this.CreateTimer( 1, 0.5 );
          }
      else
      {
              This.CreateTimer( 2, 0.25 );
      }
    }
  }
}

state CheckSpawn$
{
    transition -> Inactive$: OnGoHandleMessage( WE_REQ_DEACTIVATE );

  trigger OnTimer$( 1 )
  {
    if ( AiQuery.GetCount( owner.Go, QT_ALIVE_CONSCIOUS, owner.Go.Children ) < max_alive_children$ )
    {
      Report.ReportF("jedi","[%8.3f] Transition [CheckSpawn$ -> Opening$] for %s\n",WorldTime.time,owner.goid.go.templatename);
      SetState Opening$;
    } else {
      this.CreateTimer( 1, spawn_period$ );
    }
  }

  event OnEnterState$
  {
    Godb.SetScidBit( owner.scid, 17, true );

    if ( num_children_incubating$ > 0 )
    {
      Report.ReportF("jedi","[%8.3f] Incubating Check for %s\n",WorldTime.time,owner.goid.go.templatename);
        this.CreateTimer( 1, spawn_period$ );
    }
    else
    {
      Report.ReportF("jedi","[%8.3f] Transition [CheckSpawn$ -> Exiting$] for %s\n",WorldTime.time,owner.goid.go.templatename);
      SetState Exiting$;
    }
  }
}

State Opening$
{
  transition -> Accel$: OnTimer( 1 );
  transition -> Accel$: OnGoHandleMessage( WE_ANIM_DONE );

    event OnEnterState$
    {
    this.CreateTimer( 1, spawn_period$ );

    if( !spawn_guy$ )
    {
      SetState CheckSpawn$;
    }
  }
}

State Accel$
{
    event OnEnterState$
    {
    if ( accelerate$ )
    {
         Calc_Accel$;
      }
      SetState Closing$;
  }
}

State Closing$
{
  event OnEnterState$
  {
    SetState CheckSpawn$;
  }
}

State Exiting$
{
  event OnEnterState$
  {
    Godb.SetScidBit( owner.scid, 17, false );
    num_children_incubating$ = 0;
  }
}